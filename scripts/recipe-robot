#!/usr/bin/python
# This Python file uses the following encoding: utf-8

# Recipe Robot
# Copyright 2015-2018 Elliot Jordan, Shea G. Craig, and Eldon Ahrold
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.


"""
recipe-robot

Easily and automatically create AutoPkg recipes.

usage: recipe-robot [-h] [--config] [--ignore-existing] [--keep-cache]
                    [--github-token] [-v]
                    [input_path]

positional arguments:
  input_path         Path from which to derive AutoPkg recipes. This can be
                     one of the following: existing app, Sparkle feed, GitHub
                     URL, BitBucket URL, SourceForge URL, or direct download
                     URL.

optional arguments:
  -h, --help         show this help message and exit
  --app-mode         Strip colors from Recipe Robot output. Designed for
                     improved interoperability with the Recipe Robot native OS
                     X app.
  -c, --config       Adjust Recipe Robot preferences prior to generating
                     recipes.
  --debug            Generate extremely detailed output. Meant to help trace
                     issues with Recipe Robot. (Debug mode also enables
                     verbose output.)
  --ignore-existing  Creates recipes even if "autopkg search" results show
                     that recipes already exist for this app.
  --keep-cache       Keep the Recipe Robot cache, instead of performing the
                     usual cleanup. This allows you to manually inspect the
                     files Recipe Robot downloaded. The cache will be cleared
                     again upon next run.
  --github-token     Use a GitHub API token when searching for existing
                     recipes.
  -v, --verbose      Generate additional output about the process.
"""


import argparse
import os
import pprint
import pwd
import shutil
import sys
import traceback

# Test for platform here, before we try to import any PyObjC stuff.
if  sys.platform != "darwin":
    print "Recipe Robot requires Mac OS X."
    sys.exit(1)

# TODO (Shea): Clean up importing from our library.
import recipe_robot_lib
from recipe_robot_lib.exceptions import RoboException, RoboError
from recipe_robot_lib.facts import Facts
from recipe_robot_lib.inspect import process_input_path
from recipe_robot_lib.recipe import Recipes
from recipe_robot_lib import tools
from recipe_robot_lib.tools import (
    create_dest_dirs, robo_print, LogLevel, OutputMode, print_welcome_text,
    get_user_defaults, save_user_defaults, __version__, ALL_SUPPORTED_FORMATS,
    print_death_text, congratulate, CACHE_DIR)

def main():
    """Make the magic happen."""

    facts = Facts()

    try:
        setup(facts)
        print_welcome_text()
        prefs = init_prefs(facts)

        # Collect facts from the input path, based on the type of path.
        # TODO (Shea): Standardize on always returning Facts, even though they
        # are passed by reference, to remove ambiguity about what is happening.
        process_input_path(facts)

        # Time the execution of generating recipes.
        time, _ = recipe_robot_lib.generate_recipes(facts, prefs)  # pylint: disable=assignment-from-no-return
        facts["execution_time"] = time

        # Pat on the back!
        congratulate(prefs)
    except KeyboardInterrupt:
        robo_print("\nAborting Recipe Robot!", LogLevel.ERROR)
        sys.exit(0)
    except RoboError as error:
        message = error.message
        if OutputMode.debug_mode and error.error:
            message += error.error

        facts["errors"].append(message)
        print_death_text()
        sys.exit(1)
    # TODO: Any code requiring exceptions should do local handling, then
    # re-raise as a RoboException subclass.
    except (RoboException, Exception) as error:   # pylint: disable=broad-except
        message = ("Recipe Robot exploded with unexpected error: %s" %
                   error.message)
        if facts["args"].verbose:
            message += "\n%s" % traceback.format_exc(error)
        else:
            # TODO: Is this overkill?
            message += "\nRun with -v/--verbose for more info."
        facts["errors"].append(message)
        print_death_text()
        sys.exit(1)
    finally:
        # Make sure to reset the terminal color.
        recipe_robot_lib.tools.reset_term_colors()

        # Clean up cache folder.
        if os.path.exists(CACHE_DIR) and not facts["args"].keep_cache:
            shutil.rmtree(CACHE_DIR)

        # If debug is on, print all the things.
        if OutputMode.debug_mode:
            debug_dump({
                "Command line arguments": facts["args"],
                "Supported file formats": ALL_SUPPORTED_FORMATS,
                "Preferences for this session": prefs,
                "Recipe information": facts["recipes"],
                # TODO: This is redundant. Perhaps just pull out other
                # keys we're interested in.
                "Facts we have collected": facts})


def setup(facts):
    """Parse args, set state for recipe generation, and setup cache.

    Args:
        facts: A Facts object.
    """
    # Parse command line arguments.
    argparser = build_argument_parser()
    args = argparser.parse_args()

    tools.color_setting = not args.app_mode

    # If no input path nor --config arg was specified, print help
    # and exit.
    if not args.input_path and not args.config:
        argparser.print_help()
        sys.exit(0)

    facts["args"] = args
    configure_from_args(facts)

    # Create the master recipe information list.
    facts["recipes"] = Recipes()

    # Make someplace to cache things.
    create_dest_dirs(CACHE_DIR)


def build_argument_parser():
    """Build and return the argument parser for Recipe Robot.

    Returns:
        Parser object.
    """
    parser = argparse.ArgumentParser(
        description="Easily and automatically create AutoPkg recipes.")
    parser.add_argument(
        "input_path",
        nargs='?',
        help="Path from which to derive AutoPkg recipes. This can be one of "
             "the following: existing app, Sparkle feed, GitHub URL, "
             "BitBucket URL, SourceForge URL, or direct download URL.")
    parser.add_argument(
        "--app-mode",
        action="store_true",
        help="Strip colors from Recipe Robot output. Designed for improved "
             "interoperability with the Recipe Robot native OS X app.")
    parser.add_argument(
        "-c", "--config",
        action="store_true",
        help="Adjust Recipe Robot preferences prior to generating recipes.")
    parser.add_argument(
        "--debug",
        action="store_true",
        help="Generate extremely detailed output. Meant to help trace issues "
             "with Recipe Robot. (Debug mode also enables verbose output.)")
    parser.add_argument(
        "--ignore-existing",
        action="store_true",
        help="Creates recipes even if \"autopkg search\" results show that "
             "recipes already exist for this app.")
    parser.add_argument(
        "--keep-cache",
        action="store_true",
        help="Keep the Recipe Robot cache, instead of performing the usual "
             "cleanup. This allows you to manually inspect the files Recipe "
             "Robot downloaded. The cache will be cleared again upon next "
             "run.")
    parser.add_argument(
        "--github-token",
        action="store_true",
        help="Use a GitHub API token when searching for existing recipes.")
    parser.add_argument(
        "--skip-icon",
        action="store_true",
        help="Do not extract an icon from the source app.")
    parser.add_argument(
        "-v", "--verbose",
        action="store_true",
        help="Generate additional output about the process.")
    return parser


def configure_from_args(facts):
    """Perform validation and reporting on args."""
    args = facts["args"]
    # If --ignore-existing was specified, print a warning.
    if args.ignore_existing is True:
        facts["warnings"].append(
            "Will build recipes even if they already exist in \"autopkg "
            "search\" results. Please don't upload duplicate recipes to "
            "public AutoPkg repos on GitHub.")

    # If --verbose was specified, set verbose mode to True.
    if args.verbose is True or OutputMode.verbose_mode is True:
        OutputMode.set_verbose_mode(True)

    # If --debug was specified, set debug mode to True.
    if args.debug is True or OutputMode.debug_mode is True:
        OutputMode.set_debug_mode(True)


def init_prefs(facts):
    """Read Recipe Robot preferences.

    Preferences are handled in the following priority order:
        0. If --config argument is specified, ignore prefs and rebuild.
        3. If preferences plist doesn't exist, rebuild.
        4. If preferences plist does exist, use it.

    Args:
        facts: The Facts object with required keys:
            args
            warnings
            recipes

    Returns:
        prefs: A fully populated preference dictionary.
    """
    args = facts["args"]
    recipes = facts["recipes"]
    # If prefs file exists, try to read from it.
    prefs = get_user_defaults()
    if prefs:
        for recipe in recipes:
            # Load preferred recipe types.
            if recipe["type"] in prefs["RecipeTypes"]:
                recipe["preferred"] = True
            else:
                recipe["preferred"] = False

        if args.config is True:
            robo_print("Showing configuration options...")
            prefs = build_prefs(prefs, facts)

        # This seems to be necessary in order to avoid an error when reading
        # the plist back during subsequent runs.
        prefs["RecipeCreateCount"] = int(prefs.get("RecipeCreateCount", 0))

    else:
        # The prefs file doesn't exist.
        message = "No prefs file found. Building new preferences..."
        facts["warnings"].append(message)
        prefs = build_prefs({}, facts)

    # Record last version number.
    prefs["LastRecipeRobotVersion"] = __version__

    # Save preferences to disk for next time.
    save_user_defaults(prefs)

    return prefs


def build_prefs(prefs, facts):
    """Prompt user for preferences, then save them back to the plist.

    Args:
        prefs: The preference dictionary, passed from init_prefs().
        facts: Facts object with required keys:
            recipes: The list of known recipe types, created by
                init_recipes().
            warnings: List for storing any warnings.

    Returns:
        prefs: The preference dictionary, newly populated from user
            input.
    """
    recipes = facts["recipes"]
    # Start recipe count at zero, if no value already exists.
    if "RecipeCreateCount" not in prefs:
        prefs["RecipeCreateCount"] = int(0)

    get_recipe_identifier_prefix(prefs)
    get_recipe_creation_location(prefs)
    get_preferred_recipe_types(prefs, recipes)
    set_recipe_preferences(prefs, recipes)

    return prefs


def set_recipe_preferences(prefs, recipes):
    """Set "preferred" status of each recipe type.

    Args:
        prefs: The preference dictionary, passed from init_prefs().
        recipes: The list of known recipe types, created by
            init_recipes().
    """
    for recipe in recipes:
        if recipe["preferred"] is True:
            prefs["RecipeTypes"].append(recipe["type"])

            # If DeployStudio recipes are among the preferred types,
            # prompt for the path of the Packages folder.
            if recipe["type"] == "ds":
                if "DSPackagesPath" not in prefs:
                    prefs["DSPackagesPath"] = "/Shared/DeployStudio/Packages"
                robo_print("\nLocation of your DeployStudio packages:")
                robo_print("This where packages will be copied in order to "
                           "appear in DeployStudio.\n")
                choice = raw_input(
                    "[%s]: " % prefs["DSPackagesPath"])
                if choice != "":
                    prefs["DSPackagesPath"] = str(choice).rstrip("/ ")

            if recipe["type"] == "jss":
                if prefs.get("FollowOfficialJSSRecipesFormat", False) is False:
                    follow_jss_recipes_format = "N"
                else:
                    follow_jss_recipes_format = "Y"
                robo_print("\nFollow official jss-recipes style format? (Y/N)")
                robo_print("See details here: "
                           "https://github.com/autopkg/jss-recipes"
                           "#style-guide\n")
                choice = raw_input("[%s]: " % follow_jss_recipes_format)
                if choice.lower() in ("y", "yes", "true", "ok", "yep", "sure"):
                    prefs["FollowOfficialJSSRecipesFormat"] = True
                else:
                    prefs["FollowOfficialJSSRecipesFormat"] = False


def get_recipe_identifier_prefix(prefs):
    """Prompt for and save recipe identifier prefix.

    Args:
        prefs: The preference dictionary, passed from init_prefs().
    """
    if "RecipeIdentifierPrefix" not in prefs:
        default_username = pwd.getpwuid(os.getuid())[0]
        if default_username == "":
            default_username = "your_name_here"
        prefs["RecipeIdentifierPrefix"] = "com.github.%s" % default_username
    robo_print("\nRecipe identifier prefix")
    robo_print("This is your default identifier, in reverse-domain "
               "notation.\n(If you have a GitHub account, it's customary to "
               "use com.github.<your GitHub username>.)\n")
    choice = raw_input("[%s]: " % prefs["RecipeIdentifierPrefix"])
    if choice != "":
        prefs["RecipeIdentifierPrefix"] = str(choice).rstrip(". ")


def get_recipe_creation_location(prefs):
    """Prompt for recipe creation location.

    Args:
        prefs: The preference dictionary, passed from init_prefs().
    """
    if "RecipeCreateLocation" not in prefs:
        prefs["RecipeCreateLocation"] = os.path.expanduser(
            "~/Library/AutoPkg/Recipe Robot Output")
    robo_print("\nLocation to save new recipes")
    robo_print("This is where on disk your newly created recipes will be "
               "saved.\n")
    choice = raw_input(
        "[%s]: " % prefs["RecipeCreateLocation"])
    if choice != "":
        prefs["RecipeCreateLocation"] = str(choice).rstrip("/ ")


def get_preferred_recipe_types(prefs, recipes):
    """Prompt to set recipe types on/off as desired.

    Args:
        prefs: The preference dictionary, passed from init_prefs().
        recipes: The list of known recipe types, created by
            init_recipes().
    """
    prefs["RecipeTypes"] = []
    robo_print("\nPreferred recipe types")
    robo_print("Choose which recipe types will be offered to you by "
               "default.\n")
    while True:
        i = 0
        for recipe in recipes:
            if recipe["preferred"] is False:
                indicator = " "
            else:
                indicator = "*"
            robo_print("[%s] %s. %s - %s" %
                       (indicator, i, recipe["type"], recipe["description"]),
                       indent=2)
            i += 1
        robo_print("A. Enable all recipe types.", indent=6)
        robo_print("D. Disable all recipe types.", indent=6)
        robo_print("Q. Quit without saving changes.", indent=6)
        robo_print("S. Save changes and proceed.", indent=6)
        choice = raw_input(
            "\nType a number to toggle the corresponding recipe "
            "type between ON [*] and OFF [ ].\nWhen you're satisfied "
            "with your choices, type an \"S\" to save and proceed: ")
        if choice.upper() == "S":
            break
        elif choice.upper() == "A":
            for recipe in recipes:
                recipe["preferred"] = True
        elif choice.upper() == "D":
            for recipe in recipes:
                recipe["preferred"] = False
        elif choice.upper() == "Q":
            sys.exit(0)
        else:
            try:
                choice = int(choice)
                if recipes[choice]["preferred"] is False:
                    recipes[choice]["preferred"] = True
                else:
                    recipes[choice]["preferred"] = False
            except (ValueError, IndexError):
                invalid_option_msg = ("%s is not a valid option. Please try "
                                      "again.\n" % choice)
                robo_print(invalid_option_msg, LogLevel.WARNING)
                continue

            # Automatically enable download recipe type if required.
            if recipes[choice]["type"] in ("munki", "pkg", "install", "jss",
                                           "lanrev", "ds", "sccm",
                                           "filewave", "bigfix"):
                for recipe in recipes:
                    if recipe["type"] == "download":
                        recipe["preferred"] = True
            # Automatically enable pkg recipe type if required.
            if recipes[choice]["type"] in ("jss", "lanrev", "ds", "sccm"):
                for recipe in recipes:
                    if recipe["type"] == "pkg":
                        recipe["preferred"] = True


def debug_dump(items):
    """Dump all the variables we know about to output.

    Args:
        items: A dict of dicts of all the things to dump to output.
    """
    for key, value in items.iteritems():
        robo_print("%s:\n%s\n" % (key.upper(), pprint.pformat(value)),
                   LogLevel.DEBUG)



if __name__ == "__main__":
    main()
